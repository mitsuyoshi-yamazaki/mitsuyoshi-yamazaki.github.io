[{"content":"A short story in SF Magazine Aug 2022\nKoichi Harukure \u0026ldquo;Mortal Game\u0026rdquo;\nThe Search for Interstellar Life project has discovered an organic cellular automaton. The rules are deterministic, and calculations show that all \u0026ldquo;cells\u0026rdquo; will disappear in the near future. Cellular automata are life-like if they are self-replicators that spontaneously reproduce from their environment, whereas a phenomenon whose behavior can be computed deterministically cannot be treated as life. Should we leave the automaton untouched and let it \u0026ldquo;go extinct\u0026rdquo; in order not to disturb its natural environment, or should we \u0026ldquo;breed\u0026rdquo; it and modify the rules to foster long-period patterns? The team\u0026rsquo;s conclusion is…\nThis is the story of a human being\u0026rsquo;s journey to an alien planet in search of an unknown phenomenon, the discovery of a phenomenon that fulfills that very purpose, and how humans deal with things that cannot be captured within the framework of existing science. The spontaneous generation of an organic automaton is a plausible scenario, considering the spontaneous generation of life, and the life-like nature of such a quasi-life form is exactly what is being discussed in the artificial life field.\nCan we call a phenomenon whose behavior can be deterministically determined life?\nIf it is life, can we call an electronically simulated pattern of that phenomenon life?\nWould we not call life a being that survives by any means and resists its own destruction?\nBut the focus of this story is not the alien cellular automaton, nor the discussion of its vitality, but the outpouring of human imagination and creativity towards the unknown. The conclusion of introducing non-deterministic elements into a deterministic system is exactly one direction of artificial life production toward an Open-Ended system.\nSee for yourself how this story will end.\n","permalink":"https://mitsuyoshi-yamazaki.github.io/posts/2022-11-13_book_motal_game/","summary":"A short story in SF Magazine Aug 2022\nKoichi Harukure \u0026ldquo;Mortal Game\u0026rdquo;\nThe Search for Interstellar Life project has discovered an organic cellular automaton. The rules are deterministic, and calculations show that all \u0026ldquo;cells\u0026rdquo; will disappear in the near future. Cellular automata are life-like if they are self-replicators that spontaneously reproduce from their environment, whereas a phenomenon whose behavior can be computed deterministically cannot be treated as life. Should we leave the automaton untouched and let it \u0026ldquo;go extinct\u0026rdquo; in order not to disturb its natural environment, or should we \u0026ldquo;breed\u0026rdquo; it and modify the rules to foster long-period patterns?","title":"SF Review: Koichi Harukure \"Mortal Game\""},{"content":"This article is automatically generated from the original content\n※ この記事で単にScreepsと記載しているゲームはScreeps: Worldのことです\n※※ この記事が参照している情報は2022年8月時点のものです\nScreepsのチュートリアルを終えるといよいよゲーム世界にデプロイできるようになりますが、実サーバーでうごくbotを実装するためにはゲーム世界の非機能要件を知っている必要があります。\nこれはScreepsのドキュメンテーションに記載されているのですが、それを読めというヒントはどこにも出てこないうえに英語で記載されているので、初心者に必要な部分を抜粋して日本語でまとめておきます。\nDocs - Screeps\nOverview botを実装するにあたって参考になるリンク集が載っています。\n実装を安全に試したいプレイヤー向けのサンドボックス環境：Tutorial, Training, Custom Tutorial ステップバイステップでCreep, Spawn, Towerの使用方法とゲーム内エディタの使い方を学びます Training あらかじめ決められた地形で、実装したbotを検証するための環境です Custom 地形、RCL、Structureの数など、ほとんど全ての環境要因を自由にカスタムできる環境でbotの動作検証を行えます ドキュメンテーション https://docs.screeps.com ここでまとめているドキュメンテーション本体 https://docs.screeps.com/api/ ゲームが提供するAPIの仕様書 コミュニティチャット 運営がDiscordサーバーを提供しており、ゲームと実装に関する話題/質問についてチャットできます\n招待リンク：https://discord.com/invite/RjSS5fQuFx\n主なDiscordチャンネル\nrules Discordの使用ルールです。要するに大人としてふるまってくださいねということです。読んでください useful-links お役立ちリンク集です world-help 全般的な質問をする場所 cpu-clinic CPU使用時間に関する質問をする場所 languages and technologiesのチャンネル群 各プログラミング言語に関する話題を話す場所 japanese-日本語 日本語で質問ができる場所 Introduction Roomの外に広がるゲーム世界の説明です。\nゲーム世界は50 x 50セルで構成されるRoom, 9 x 9Roomで構成されるSector, Sectorの集合であるShardという単位で構成されています。\nRoom 50 x 50セルで構成される セルはそれぞれplain, swamp, wallのいづれかの状態をとり、これがRoomごと固有の地形をつくる Controllerをclaimすることで自分の支配下に置くことができ、Structureを設置できるようになる Roomは隣接するRoomと接続しており、Creepはその間を自由に移動できる Sector 9 x 9Roomで構成される Sectorの構造： 中心の3x3RoomはControllerをもたずclaim不可だが、資源の豊富なSource Keeper\u0026rsquo;s Room Source Keeper\u0026rsquo;s Room以外は通常のclaim可能なRoom Sectorの間はこれもControllerをもたないHighway Roomが区切っており、claimされず妨害が少ないのでCreepの長距離移動に用いられる Shard 12 x 12程度のSectorで構成される shard0, shard1, shard2, shard3の4つのshardがあり、それぞれ独立して実行されるためtick速度が異なる shard3のみCPUに上限がかかっているため、CPU unlockの課金の有無に関わらず、全員平等なCPU量でプレイができる 初心者プレイヤーはshard3にデプロイするのが良いでしょう。\nshard0,1,2は巨大な領土を擁する強プレイヤーが徘徊している魔境なのに対して、shard3は平等にCPU上限がかかっているため低レベル帯のプレイヤーが多く活発なshardとなっています。\nCreeps Body parts Creepは以下の7種類のbody partsの組み合わせでその能力が決まります。\nWORK: Energyのharvest, Structureのbuildとrepair, upgradeControllerなどを行う MOVE: Creepの移動 CARRY: Energyやその他の資源の格納 ATTACK: 近接攻撃 RANGED_ATTACK: 遠隔攻撃 HEAL: 回復 CLAIM: Roomの確保（claim） TOUGH: CreepのHP増加 Body partsの種類ごとに、Creepをspawnする際の消費Energyと、能力値の増加分が異なります。それらの仕様はAPI仕様書に記載があります。\n1Creepに積めるbody partsは最大50個までです。\nhttps://docs.screeps.com/api/#Creep\nCreepの移動速度の仕組み MOVE以外のbody partsは、Creepが隣のセルに移動したタイミングでCreepの疲労値（Creep.fatigure）を増加させます。\n疲労値が1以上の場合、Creepはそのtickは動けません。\nMOVEパーツひとつあたり、1tickで疲労値を2減少させます。\n移動の最大速度は1セル/tickであり、これを超えることはありません。\n疲労値の増加量は地面の状態により決まり、MOVE以外のbody partsひとつ当たり以下の量増加します。\n地面がplain：2fatigure/tick 地面がswamp：10fatigure/tick 地面にRoadが敷いてある：1fatigure/tick Creepがダメージを受けた場合 CreepのHP総量はもっているbody partsの量で決まり、body parts数 x 100です。\nCreepがダメージを受けると先頭のbody partsからHPがなくなっていき、HPが0になったbody partsはその能力を失います。\nMOVE,WORK,CARRY Creepが150ダメージを負った場合は移動できなくなるもののWORKとCARRYに由来する能力は十全に利用できます。\nそれに対し、同じ構成のCreepでも CARRY,WORK,MOVE Creepが150ダメージを負った場合は移動とWORK系能力は使えるものの資源の格納ができなくなります。\nBody partsの組み合わせによるCreep能力値の例 [汎用] WORK,CARRY,MOVE - HP: 300 - harvest: 2 Energy/tick - carry capacity: 50 - move: CARRYパーツに資源を格納している場合は 1セル/2tick, CARRYパーツが空の場合は 1セル/tick [エネルギー輸送] 4 x CARRY, 2 x MOVE - HP: 600 - carry capacity: 200 - move: Road上で常に1セル/tick [Creep迎撃用] 15 x RANGED_ATTACK, 10 x HEAL, 25 x MOVE - HP: 5000 - heal: 120HP/tick - ranged attack: 150HP/tick - move: 1セル/tick Control ScreepsにはGCL（Global Cotrol Level）とRCL（Room Control Level）というふたつの指標があります。\nRoom Control Level 確保しているRoomのControllerに、Creep.upgradeControllerAPIを使ってエネルギーを注入することでレベルが上がります。\nレベルが上がるごとに建てられるStructureの種類と数が増え（※ 原文を参照のこと）、それによりRoomで行える行動が増えます。\n序盤の優先順位としては、RCLが上がったら新たにアンロックされたStructureを一通り建て、それが終わったらまたRCLが上がるまでupgradeControllerにエネルギーを費やすというものになります。\nRCLは一定期間upgradeControllerが行われない、もしくは他プレイヤーからattackControllerを受けることで下がってしまい、アンロックされていた機能が使えなくなってしまうため注意が必要です。\nGlobal Control Level プレイを開始してからupgradeControllerで費やしたEnergyの累積でGCLが上がります。\nGCLはリセットされないため、全滅してリスポーンしても持ち越されます。\nGCLは確保できるRoomの数とCPU上限に影響します。\n各プレイヤーはGCLの分だけRoomを確保（claim）できます。\n多くのRoomがあればGCLの増加率が増え、また全滅しにくくなるためGCLが上がったら新たな部屋の確保に動きましょう。\nGCLが最初に上がるのは、最初の部屋がおおよそRCL6に上がる前後のタイミングです。\nGCLの上昇によりCPU上限が10ずつ増えます。\nCPU上限の詳細は後述\nDefense 疲れたので今日はここまでにします\nその他ドキュメントに記載されていない内容 課金 Screepsではゲームの購入時と、ゲーム購入者向けのCPUアンロックで課金が発生します。\nそれぞれ行える内容：\n無課金 チュートリアル ゲーム購入 ゲーム世界へのデプロイ 使用可能なCPU上限は20に制限 CPUアンロック 消費型の一時的にCPU上限を増やすアイテム、一定期間CPU上限が撤廃されるサブスクリプション、一度の購入で無期限にCPU上限が撤廃されるライフタイムサブスクリプションなどがある ","permalink":"https://mitsuyoshi-yamazaki.github.io/posts/2022-09-03_screeps_documentation/","summary":"This article is automatically generated from the original content\n※ この記事で単にScreepsと記載しているゲームはScreeps: Worldのことです\n※※ この記事が参照している情報は2022年8月時点のものです\nScreepsのチュートリアルを終えるといよいよゲーム世界にデプロイできるようになりますが、実サーバーでうごくbotを実装するためにはゲーム世界の非機能要件を知っている必要があります。\nこれはScreepsのドキュメンテーションに記載されているのですが、それを読めというヒントはどこにも出てこないうえに英語で記載されているので、初心者に必要な部分を抜粋して日本語でまとめておきます。\nDocs - Screeps\nOverview botを実装するにあたって参考になるリンク集が載っています。\n実装を安全に試したいプレイヤー向けのサンドボックス環境：Tutorial, Training, Custom Tutorial ステップバイステップでCreep, Spawn, Towerの使用方法とゲーム内エディタの使い方を学びます Training あらかじめ決められた地形で、実装したbotを検証するための環境です Custom 地形、RCL、Structureの数など、ほとんど全ての環境要因を自由にカスタムできる環境でbotの動作検証を行えます ドキュメンテーション https://docs.screeps.com ここでまとめているドキュメンテーション本体 https://docs.screeps.com/api/ ゲームが提供するAPIの仕様書 コミュニティチャット 運営がDiscordサーバーを提供しており、ゲームと実装に関する話題/質問についてチャットできます\n招待リンク：https://discord.com/invite/RjSS5fQuFx\n主なDiscordチャンネル\nrules Discordの使用ルールです。要するに大人としてふるまってくださいねということです。読んでください useful-links お役立ちリンク集です world-help 全般的な質問をする場所 cpu-clinic CPU使用時間に関する質問をする場所 languages and technologiesのチャンネル群 各プログラミング言語に関する話題を話す場所 japanese-日本語 日本語で質問ができる場所 Introduction Roomの外に広がるゲーム世界の説明です。\nゲーム世界は50 x 50セルで構成されるRoom, 9 x 9Roomで構成されるSector, Sectorの集合であるShardという単位で構成されています。\nRoom 50 x 50セルで構成される セルはそれぞれplain, swamp, wallのいづれかの状態をとり、これがRoomごと固有の地形をつくる Controllerをclaimすることで自分の支配下に置くことができ、Structureを設置できるようになる Roomは隣接するRoomと接続しており、Creepはその間を自由に移動できる Sector 9 x 9Roomで構成される Sectorの構造： 中心の3x3RoomはControllerをもたずclaim不可だが、資源の豊富なSource Keeper\u0026rsquo;s Room Source Keeper\u0026rsquo;s Room以外は通常のclaim可能なRoom Sectorの間はこれもControllerをもたないHighway Roomが区切っており、claimされず妨害が少ないのでCreepの長距離移動に用いられる Shard 12 x 12程度のSectorで構成される shard0, shard1, shard2, shard3の4つのshardがあり、それぞれ独立して実行されるためtick速度が異なる shard3のみCPUに上限がかかっているため、CPU unlockの課金の有無に関わらず、全員平等なCPU量でプレイができる 初心者プレイヤーはshard3にデプロイするのが良いでしょう。","title":"Screepsドキュメンテーション超訳"},{"content":"This article is automatically generated from the original content\nこれは学生の頃、連休中に思い立って書き上げたMacアプリケーションです。\n10年以上前の実装にも関わらず現行マシンで問題なくコンパイルできました。実装言語のObjective-CとCに大きな更新がなかったためかな？\n当時はパターンが収束してしまうことがわかり触るのをやめてしまったのですが、モデルの筋はいい気がするのでパラメータを変えて自動探索にかけたらなにか生まれそうな気がします。\n概要 生命現象の土台となる恒常性をもつパターンが現れうる系を作成しました。今回はモデルと計算の簡便さから、系の基本構造にはセルオートマトンを採用しました。セルオートマトンはConway\u0026rsquo;s Game of Life[^1]に代表されるように、単純なモデルを比較的少ない計算量で実行できる便利な計算モデルです。しかしパターンの恒常性の観点から考えると、ひとつのセルの状態が反転しただけで崩壊するような不安定なモデルに恒常性をもたせるのは困難です。MembraneAutomataでは近傍半径を増やす[^2]ことで頑強なパターン構築を可能にしました。そしてMNCAの上で、恒常性のある領域を外界から隔離するために、泡状の構造が生成される簡易化学モデルを実装しました。\n^1: Conway\u0026rsquo;s Game of Life - Wikipedia\n^2: Multiple Neighbourhood Cellular Automata (MNCA)と呼ばれる。Understanding Multiple Neighbourhood Cellular Automata\nMotivation of Current Work 私は生命のもつ予測不能性を再現するというテーマを研究しており、この作品はそのテーマのうえで、恒常性の創発に主眼を置いて作ったものです。予測不能性という制約のもとで設計するためには、実現したい現象（ここでは恒常性）を直接実装するのではなく、下位の現象を実装することを介して、実現したい上位の現象を創発する、という手法をとる必要があります。本作ではセルオートマトンの状態遷移ルールを適切に設定することによりそれを実現しました。\n要件 系の要件 a. 比較的単純かつ小規模な計算で実現できること b. 現れるパターンがConway\u0026rsquo;s Game of Lifeより安定していること a.モデルの単純さと計算しやすさの要件からセルオートマトンを選択し、b.パターン安定の要件から近傍半径を増やして近傍セルひとつあたりのパターンへの影響度を小さくすることにしました。\nセルオートマトンのルール要件 c. 恒常性をもつパターンが発生しうること c1. 系全体では、自然な行いに任せていると秩序が失われること（現実世界でのエントロピーの増大則と同等の仕組み） c2. そのような系のなかで、外界に影響されない区画が存在すること c21. その区画の境界部分が外界の影響を打ち消し、内部に伝えない役割を果たすこと 現実の現象を参考にこれらの要件を満たすルールを考えると、水中の油滴、あるいは泡を抽象化することで理解しやすいモデルを作れそうに思えます。泡状のパターンの境界付近で外界の影響を打ち消し、内部に恒常性をつくる、という構造です。\n実装仕様 実装: MembraneAutomata - GitHub\nMNCAの実装 MembraneAutomataで実装するMNCAは近傍半径を2以上に拡張したものです。自セルの次の状態に影響する近傍セル数 n 近傍半径を r と置いたとき\nn = (r * (r + 1)) * 4\nと表せます。\nその他の仕様はConway\u0026rsquo;s Game of Lifeを踏襲し、自セルの次の状態は、自セルの現在の状態と近傍セルの現在の状態の合計値から決定します。\nMembraneAutomataモデル（セルオートマトンのルール） このモデルでは、物質のメタファーとしてセルの状態を表現します。より単純な物質から複雑な物質が合成され、複雑な物質がはより単純な物質に分解されるという仕組みを、状態間で優劣のないセルオートマトンで表現するために、状態遷移の条件に優先順位を設けます。\n状態遷移の条件 状態遷移は\n合成条件: その状態が新たに生成される、もしくはその状態が保たれる条件 分解条件: その状態が保てなくなる条件 の条件に合致した際に発生します。合成・分解条件は状態ごとに複数定義することができます。次状態を計算する際は、全状態分の合成・分解条件を優先度順に照合し、合致した条件を適用して次のセル状態を求めます。全ての状態は分解先の状態をもち、分解条件に合致した場合は分解先状態に遷移します。\n実験 基底状態 全ての現象の基盤となるふたつの状態（水と油のメタファー）、およびその境界面に発生する膜の状態を定義します。\n0状態（水のメタファー, 青） 合成条件：近傍セルの過半数が0(水)である 分解条件：なし（1(油)の合成条件と同じ） 分解先：1(油) 1状態（油のメタファー, 黒） 合成条件：近傍セルの過半数が1(油)である 分解条件：なし（0(水)の合成条件と同じ） 分解先：0(水) 2状態：（膜のメタファー, オレンジ） 合成条件：近傍セルの半数が0(水)である and 近傍セルの半数が1(油)である and 近傍に2(膜)が存在する※ 分解条件：近傍セルの半数が0(水)でない or 近傍セルの半数が1(油)でない 分解先：0(水) ※ 自己触媒となる条件\nある一様の領域と、それを分離するパターンはこのように単純な条件で実現できます。\n移動と内部構造 水、油の基底状態の他に以下の状態を追加しました。\n水滴の移動を実現するために、水領域を拡大する膜(ピンク)、油領域を拡大する膜(オレンジ)を導入 水滴に内部構造をつくるために、水領域内のみで合成される状態(緑)を導入 このルールセットではランダムな初期状態から計算を続けると、移動体が合体して移動方向が揃っていき、波状のパターンに収束するのが観察されました。\nQ. 移動の現象は要件上必須ではないのでは？ A. それはそう 恒常性 前実験で系が収束することがわかったためにここまで到達しませんでしたね。今度やりましょう\n考察 MNCA 近傍半径を増やし近傍セルひとつひとつの影響度を小さくすることでConway\u0026rsquo;s Game of Lifeより堅牢なパターンを作り出すことは意図通り実現できました。\nMembraneAutomataモデル セルオートマトンの状態遷移を合成・分解条件と抽象化することで、条件を追加していくことで既存の現象を保ったまま新たな複雑な現象を実装していくことができるようになりました。\nこの仕組みの特徴としては以下のものが挙げられます。\n状態（物質）の特徴を保ったまま別の状態や別の合成・分解条件の追加が可能 条件判定の優先度が高ければその状態は安定であり、優先度が低くなるごとに安定性も下がる 合成・分解条件と抽象化した状態遷移の仕組みを採用したことで、パターンを実現するための条件を考えるのが比較的容易 一方で、パターンを直接的に記述できるために、創発性が薄れてしまった点は改善が必要です。\nパターンの恒常性 実験したルールセットでは恒常性のあるパターンが生まれたとは言えませんが、MembraneAutomataモデルは恒常性をもつルールセットを実現可能だと考えています。\nまず、恒常性を実現する前提である、要件c1. 系全体では、自然な行いに任せていると秩序が失われること は\n条件判定の優先度が高ければその状態は安定であり、優先度が低くなるごとに安定性も下がる\nの性質によって、恒常性なしには最も単純な水と油の混合パターンに収束する、といったルールセットを組めば実現できます。\n要件c2. そのような系のなかで、外界に影響されない区画が存在すること も、泡状のパターンとその境界部に発現する状態は組めているため実現可能だと思われます。一方でそのような現象を直接実装することなしに創発させられるかという部分は不安があり、これは実装してみなければ明らかにならない部分です。\nFuture work アプリケーションの実装上の課題 新規の状態遷移の条件を自動で設定できるようにすることで、新たなルールセットの探索を自動化する 近傍セルの影響度を位置によって変化させる[^3]ことで、自セルと同じ状態だがパターン的に接続していない膜面と融合しない膜、といった高度な現象の実現を検証する おそらくパターンの実装の容易さとパターンの創発性は排他な関係にあるので、それが正しいかどうか、どのように兼ね合いを取るのか持続的に検討する ^3: Leniaのkernelと同等の仕組み Lenia - Biology of Artificial Life - arXiv\n","permalink":"https://mitsuyoshi-yamazaki.github.io/posts/2022-07-30-174703.671472/","summary":"This article is automatically generated from the original content\nこれは学生の頃、連休中に思い立って書き上げたMacアプリケーションです。\n10年以上前の実装にも関わらず現行マシンで問題なくコンパイルできました。実装言語のObjective-CとCに大きな更新がなかったためかな？\n当時はパターンが収束してしまうことがわかり触るのをやめてしまったのですが、モデルの筋はいい気がするのでパラメータを変えて自動探索にかけたらなにか生まれそうな気がします。\n概要 生命現象の土台となる恒常性をもつパターンが現れうる系を作成しました。今回はモデルと計算の簡便さから、系の基本構造にはセルオートマトンを採用しました。セルオートマトンはConway\u0026rsquo;s Game of Life[^1]に代表されるように、単純なモデルを比較的少ない計算量で実行できる便利な計算モデルです。しかしパターンの恒常性の観点から考えると、ひとつのセルの状態が反転しただけで崩壊するような不安定なモデルに恒常性をもたせるのは困難です。MembraneAutomataでは近傍半径を増やす[^2]ことで頑強なパターン構築を可能にしました。そしてMNCAの上で、恒常性のある領域を外界から隔離するために、泡状の構造が生成される簡易化学モデルを実装しました。\n^1: Conway\u0026rsquo;s Game of Life - Wikipedia\n^2: Multiple Neighbourhood Cellular Automata (MNCA)と呼ばれる。Understanding Multiple Neighbourhood Cellular Automata\nMotivation of Current Work 私は生命のもつ予測不能性を再現するというテーマを研究しており、この作品はそのテーマのうえで、恒常性の創発に主眼を置いて作ったものです。予測不能性という制約のもとで設計するためには、実現したい現象（ここでは恒常性）を直接実装するのではなく、下位の現象を実装することを介して、実現したい上位の現象を創発する、という手法をとる必要があります。本作ではセルオートマトンの状態遷移ルールを適切に設定することによりそれを実現しました。\n要件 系の要件 a. 比較的単純かつ小規模な計算で実現できること b. 現れるパターンがConway\u0026rsquo;s Game of Lifeより安定していること a.モデルの単純さと計算しやすさの要件からセルオートマトンを選択し、b.パターン安定の要件から近傍半径を増やして近傍セルひとつあたりのパターンへの影響度を小さくすることにしました。\nセルオートマトンのルール要件 c. 恒常性をもつパターンが発生しうること c1. 系全体では、自然な行いに任せていると秩序が失われること（現実世界でのエントロピーの増大則と同等の仕組み） c2. そのような系のなかで、外界に影響されない区画が存在すること c21. その区画の境界部分が外界の影響を打ち消し、内部に伝えない役割を果たすこと 現実の現象を参考にこれらの要件を満たすルールを考えると、水中の油滴、あるいは泡を抽象化することで理解しやすいモデルを作れそうに思えます。泡状のパターンの境界付近で外界の影響を打ち消し、内部に恒常性をつくる、という構造です。\n実装仕様 実装: MembraneAutomata - GitHub\nMNCAの実装 MembraneAutomataで実装するMNCAは近傍半径を2以上に拡張したものです。自セルの次の状態に影響する近傍セル数 n 近傍半径を r と置いたとき","title":"MembraneAutomata"},{"content":"This article is automatically generated from the original content\nあれば更新します\n全般 Self-Reproduction and Evolvability 人工生命とは https://scrapbox.io/ayu-mushi/ シミュレーション molcloud - GitHub Open-Endedness For AGI, we need better tasks. For better tasks, we need open-endedness. Minecraft Open-Endedness Challenge プレゼンテーション クレイグ・ベンター 人工生命に関する発表 Games and Artificial Life: Open Endedness as common ground? CoG 2021 Keynote 書籍・論文 http://www.standardinc.jp/books/ Conway\u0026rsquo;s Game of Life Textbook 認知、意図、推論 ベイトソン 精神と自然: 生きた世界の認識論 フランシスコ・ヴァレラ 身体化された心 ウムベルト 知恵の樹 ニクラス・ルーマン 自己言及性について Reward is enough ロルフ・ファイファー 知能の原理 Screeps Screeps #4: Hauling is (NP-)hard Automated planning and scheduling カンファレンス GECKO Newsletter AI 人工知能に関する断創録 言語 Heart of Swift Building the Fastest JS (De)serializer 事業 未踏 育成事業以外は年齢制限がない？ 社会実装できること重視な印象 https://www.ipa.go.jp/jinzai/advanced/2019/koubokekka_index.html チームラボの作品がテレビやスマホのなかに。「フラワーズ ボミング ホーム」を公開 https://naked.co.jp/en/ キャリア メグ・ジェイ: 30歳は昔の20歳ではありません Computer Scienceの学位を取るために学費無料のオンライン大学UoPeopleに入ってもうすぐ1年 Reference Artificial Life Reading List ","permalink":"https://mitsuyoshi-yamazaki.github.io/posts/2022-07-26-104752.229035/","summary":"This article is automatically generated from the original content\nあれば更新します\n全般 Self-Reproduction and Evolvability 人工生命とは https://scrapbox.io/ayu-mushi/ シミュレーション molcloud - GitHub Open-Endedness For AGI, we need better tasks. For better tasks, we need open-endedness. Minecraft Open-Endedness Challenge プレゼンテーション クレイグ・ベンター 人工生命に関する発表 Games and Artificial Life: Open Endedness as common ground? CoG 2021 Keynote 書籍・論文 http://www.standardinc.jp/books/ Conway\u0026rsquo;s Game of Life Textbook 認知、意図、推論 ベイトソン 精神と自然: 生きた世界の認識論 フランシスコ・ヴァレラ 身体化された心 ウムベルト 知恵の樹 ニクラス・ルーマン 自己言及性について Reward is enough ロルフ・ファイファー 知能の原理 Screeps Screeps #4: Hauling is (NP-)hard Automated planning and scheduling カンファレンス GECKO Newsletter AI 人工知能に関する断創録 言語 Heart of Swift Building the Fastest JS (De)serializer 事業 未踏 育成事業以外は年齢制限がない？ 社会実装できること重視な印象 https://www.","title":"Read it later"},{"content":"This article is automatically generated from the original content\n疲れたので適当に流していたがこの発表はおもしろかった\n細胞のモデルの、同期的並列的に動作する部分と逐次直列で動作する部分をうまく分離してそれぞれ適した実装をしたという発表　String: a programming language for the evolution of ribozymes in a new computational protocell model Proceeding: https://direct.mit.edu/isal/proceedings/isal/54/112248\n細胞の基本的な機能は遺伝子、代謝ネットワーク、細胞膜から成り、これをモデル化したミニマムなProtoCell Modelを生成したという研究\n面白いのは\u0026rsquo;RNA\u0026rsquo;がコードする\u0026rsquo;タンパク質\u0026rsquo;が短いプログラミングコードになっており（タイトルに入っているString言語: 言語仕様はProceedingにある）、それがなんやかや実行されて周囲に作用をするというつくりになっているところ。\nエンコードされているので組み替えも突然変異もできる。Proceedingには設計した\u0026rsquo;タンパク質\u0026rsquo;と進化後それぞれのコードが載っている。\n","permalink":"https://mitsuyoshi-yamazaki.github.io/posts/2022-07-21-225949.235000/","summary":"This article is automatically generated from the original content\n疲れたので適当に流していたがこの発表はおもしろかった\n細胞のモデルの、同期的並列的に動作する部分と逐次直列で動作する部分をうまく分離してそれぞれ適した実装をしたという発表　String: a programming language for the evolution of ribozymes in a new computational protocell model Proceeding: https://direct.mit.edu/isal/proceedings/isal/54/112248\n細胞の基本的な機能は遺伝子、代謝ネットワーク、細胞膜から成り、これをモデル化したミニマムなProtoCell Modelを生成したという研究\n面白いのは\u0026rsquo;RNA\u0026rsquo;がコードする\u0026rsquo;タンパク質\u0026rsquo;が短いプログラミングコードになっており（タイトルに入っているString言語: 言語仕様はProceedingにある）、それがなんやかや実行されて周囲に作用をするというつくりになっているところ。\nエンコードされているので組み替えも突然変異もできる。Proceedingには設計した\u0026rsquo;タンパク質\u0026rsquo;と進化後それぞれのコードが載っている。","title":"ALIFE2022 Day4"},{"content":"This article is automatically generated from the original content\n英語聴きすぎてよくわからなくなってきた\n参加費にお菓子代が入ってれば経費なのに…\nChemically fueled droplets; towards the synthesis of life ボトムアップで生命の理解を深める\n生命の要素\nSelf-sustaining: 熱的平衡状態を保つ Compartment: ダーウィン進化: 自己複製と突然変異 self-sustaining compartmentをつくる\nエネルギーを取り込んでごみを排出する →化学サイクルを設計する Growing Isotropic Neural Cellular Automata growing neural CA + self organizing texture\nGNCAの問題点：\nanisotropy（異方性）があること：回転させると壊れる\n","permalink":"https://mitsuyoshi-yamazaki.github.io/posts/2022-07-20-160351.239259/","summary":"This article is automatically generated from the original content\n英語聴きすぎてよくわからなくなってきた\n参加費にお菓子代が入ってれば経費なのに…\nChemically fueled droplets; towards the synthesis of life ボトムアップで生命の理解を深める\n生命の要素\nSelf-sustaining: 熱的平衡状態を保つ Compartment: ダーウィン進化: 自己複製と突然変異 self-sustaining compartmentをつくる\nエネルギーを取り込んでごみを排出する →化学サイクルを設計する Growing Isotropic Neural Cellular Automata growing neural CA + self organizing texture\nGNCAの問題点：\nanisotropy（異方性）があること：回転させると壊れる","title":"ALIFE2022 Day3"},{"content":"This article is automatically generated from the original content\nアブストの載っているプログラムを翻訳したのち聞くようにしたら多少わかるようになった…か？わからん\nオーストラリアのソフトウェアエンジニアの参加者に、Tierraで個体長を大きくする淘汰圧はどう実装するかやオートエンコーダで創発が検出できるのではといった話を聞いた。聞き返せると6割くらいはわかる\nEmpathic Active Inference: Active Inference with Empathy Mechanism for Socially Behaved Artificial Agent 共感の認知機能を実装することでエージェントに利他的なふるまいをさせることを可能にしたという発表\nそのようなエージェントも利己的な集団に突っ込むと利己的にふるまうようなので、単に他者の利益を評価してそのようにふるまっているわけではない\nVoluntary safety pledges overcome over-regulation dilemma in AI development: an evolutionary game analysis エージェントの行動を直接的に制限するのではなく、制約を設けることにより自発的にある行動を抑制するような仕組みを作ったという発表\nSimulations of Vesicular Distanglement 細胞の小胞体間の接続をどのように切り離すかシミュレーションで研究したという発表\n時間になっても発表者が現れなかったため昼休みになった。自由かよ\n泡状の物体をどう分裂させるかという話なのだったら気になっていたので後で見直したい\n泡のような形状を自律的につくる系をつくるのは簡単で、互いに接続しつつ体積あたりの表面積が最小になるような制約をかければすぐできる。\n一方でこれを分裂させようとするのはその制約に反するため難しい。\nより大きな制約をつくって、「今までの制約は大きな制約のひとつの側面でしかないんですよ、こういう条件では制約が緩くなりますよ」ということにするか、別の仕組みを導入して力技でなんとかするか、現実の生命はどうやっているんだろうね？\nEvolving Unbounded Neural Complexity in Pursuit-Evasion Games 共進化で個体の複雑さは増加する\nprior workに出ていた言語推測ゲームって立命館大学の谷口先生かな？\nFirefly-inspired vocabulary generator for communication in multi-agent systems 蛍が群れていると自分の点滅パターンが大勢に埋もれてしまい相手に届かないため、埋もれないような点滅パターンをどのように生成するかという発表\nAlternative Comfortの研究と似てるかな\nその他に気になった発表 Testing the Efficiency of a Genome-Wide Association Study on a Computational Evolutionary Model 手法として取り入れたALifeモデルが面白そうだった ","permalink":"https://mitsuyoshi-yamazaki.github.io/posts/2022-07-19-171558.333498/","summary":"This article is automatically generated from the original content\nアブストの載っているプログラムを翻訳したのち聞くようにしたら多少わかるようになった…か？わからん\nオーストラリアのソフトウェアエンジニアの参加者に、Tierraで個体長を大きくする淘汰圧はどう実装するかやオートエンコーダで創発が検出できるのではといった話を聞いた。聞き返せると6割くらいはわかる\nEmpathic Active Inference: Active Inference with Empathy Mechanism for Socially Behaved Artificial Agent 共感の認知機能を実装することでエージェントに利他的なふるまいをさせることを可能にしたという発表\nそのようなエージェントも利己的な集団に突っ込むと利己的にふるまうようなので、単に他者の利益を評価してそのようにふるまっているわけではない\nVoluntary safety pledges overcome over-regulation dilemma in AI development: an evolutionary game analysis エージェントの行動を直接的に制限するのではなく、制約を設けることにより自発的にある行動を抑制するような仕組みを作ったという発表\nSimulations of Vesicular Distanglement 細胞の小胞体間の接続をどのように切り離すかシミュレーションで研究したという発表\n時間になっても発表者が現れなかったため昼休みになった。自由かよ\n泡状の物体をどう分裂させるかという話なのだったら気になっていたので後で見直したい\n泡のような形状を自律的につくる系をつくるのは簡単で、互いに接続しつつ体積あたりの表面積が最小になるような制約をかければすぐできる。\n一方でこれを分裂させようとするのはその制約に反するため難しい。\nより大きな制約をつくって、「今までの制約は大きな制約のひとつの側面でしかないんですよ、こういう条件では制約が緩くなりますよ」ということにするか、別の仕組みを導入して力技でなんとかするか、現実の生命はどうやっているんだろうね？\nEvolving Unbounded Neural Complexity in Pursuit-Evasion Games 共進化で個体の複雑さは増加する\nprior workに出ていた言語推測ゲームって立命館大学の谷口先生かな？\nFirefly-inspired vocabulary generator for communication in multi-agent systems 蛍が群れていると自分の点滅パターンが大勢に埋もれてしまい相手に届かないため、埋もれないような点滅パターンをどのように生成するかという発表\nAlternative Comfortの研究と似てるかな","title":"ALIFE2022 Day2"},{"content":"This article is automatically generated from the original content\n今年はイタリアなのでCESTで時差は7時間\n全て英語なので事前にアブストを読んで話の流れを掴んでおかないとだいたいわからない\nThe evolution of adaptive phenotypic plasticity stabilizes populations against environmental fluctuations Phenotypic plasticity:\nwhich is the capacity for a single genotype to produce alternate phenotypes depending on environmental conditions.\nAdoptive phenotypic plasticity: 〜が個体の生存に有利であること\ndigital organism(Avida)でモデルを検証\n餌（reword）と毒(punish)をもつ環境　餌と毒が逆のふたつの環境を用意し、その環境を交互に切り替える\nみっつの実験\nplastic 環境の変化を検出できる non-plastic 環境の変化を検出できない static 環境の変化がない（全て餌 non-plasticのみ突然変異率と表現型の変化率が桁幾つというレベルで高かった\nEvolving Programmable Computational Metamaterials ファジーな論理ゲートを生成するみたいなモデルが面白かった\n粒子の運動がどのように伝播するか、入力の粒子と出力の粒子を用意して入力粒子を動かして出力の粒子の動きを出力として扱う\nその他に気になった発表 Is Prediction Required? Using Evolutionary Robotics to Investigate How Systems Cope with Self-Caused Stimuli Dirty Transmission Hypothesis: Increased Mutations During Horizontal Transmission Can Select for Increased Levels of Mutualism in Endosymbionts Finding Chemical Organisations in Matter-Conserving AChems ","permalink":"https://mitsuyoshi-yamazaki.github.io/posts/2022-07-18-193111.491634/","summary":"This article is automatically generated from the original content\n今年はイタリアなのでCESTで時差は7時間\n全て英語なので事前にアブストを読んで話の流れを掴んでおかないとだいたいわからない\nThe evolution of adaptive phenotypic plasticity stabilizes populations against environmental fluctuations Phenotypic plasticity:\nwhich is the capacity for a single genotype to produce alternate phenotypes depending on environmental conditions.\nAdoptive phenotypic plasticity: 〜が個体の生存に有利であること\ndigital organism(Avida)でモデルを検証\n餌（reword）と毒(punish)をもつ環境　餌と毒が逆のふたつの環境を用意し、その環境を交互に切り替える\nみっつの実験\nplastic 環境の変化を検出できる non-plastic 環境の変化を検出できない static 環境の変化がない（全て餌 non-plasticのみ突然変異率と表現型の変化率が桁幾つというレベルで高かった\nEvolving Programmable Computational Metamaterials ファジーな論理ゲートを生成するみたいなモデルが面白かった\n粒子の運動がどのように伝播するか、入力の粒子と出力の粒子を用意して入力粒子を動かして出力の粒子の動きを出力として扱う\nその他に気になった発表 Is Prediction Required? Using Evolutionary Robotics to Investigate How Systems Cope with Self-Caused Stimuli Dirty Transmission Hypothesis: Increased Mutations During Horizontal Transmission Can Select for Increased Levels of Mutualism in Endosymbionts Finding Chemical Organisations in Matter-Conserving AChems ","title":"ALIFE2022 Day1"},{"content":"This article is automatically generated from the original content\n記事に対して機械翻訳を含む自然言語処理を行えるようにするため、人間が記述するMarkdownの自然言語部分のみを取り出す処理を書きます\n正規表現で全て判別できたのでわりあい簡単にできた\n要件 Markdownで記述している記事の内容を、機械翻訳を含む任意の自然言語処理に渡せるようにする 仕様 Markdownをある程度パースして自然言語の文のみを抽出する 直近で使うのは他言語コンテンツ自動生成における機械翻訳なので、生成処理の部分を置き換える 実装 Markdownパーサー 行ごとに分割したうえで、自然言語ではない以下の構文を取り除く Hugoの制御構文である ^\\n*---\\n(\\n|.)*?\\n---\\n Markdownのprefixである ^(\u0026gt;|\\s*(#####|####|###|##|#|- \\[ \\]|- \\[x\\]|-|\\d+\\.)) 他言語コンテンツ生成処理の変更点 機械翻訳は未着手なのでとりあえず「機械生成の文ですよ」という一文を挿入する Reference Pull Request 翻訳スクリプト ","permalink":"https://mitsuyoshi-yamazaki.github.io/posts/2022-07-14-004507.913203/","summary":"This article is automatically generated from the original content\n記事に対して機械翻訳を含む自然言語処理を行えるようにするため、人間が記述するMarkdownの自然言語部分のみを取り出す処理を書きます\n正規表現で全て判別できたのでわりあい簡単にできた\n要件 Markdownで記述している記事の内容を、機械翻訳を含む任意の自然言語処理に渡せるようにする 仕様 Markdownをある程度パースして自然言語の文のみを抽出する 直近で使うのは他言語コンテンツ自動生成における機械翻訳なので、生成処理の部分を置き換える 実装 Markdownパーサー 行ごとに分割したうえで、自然言語ではない以下の構文を取り除く Hugoの制御構文である ^\\n*---\\n(\\n|.)*?\\n---\\n Markdownのprefixである ^(\u0026gt;|\\s*(#####|####|###|##|#|- \\[ \\]|- \\[x\\]|-|\\d+\\.)) 他言語コンテンツ生成処理の変更点 機械翻訳は未着手なのでとりあえず「機械生成の文ですよ」という一文を挿入する Reference Pull Request 翻訳スクリプト ","title":"自然言語処理の前処理を実装"},{"content":"Requirements make English version of the contents those are in the original language (Japanese) to make them use a machine translation[^1] manually write an English contents if possible[^2] ^1: I need a hook that the machine translation is triggered in the build phase\n^2: the build phase must distinguish the contents those are manually written to not override them by machine translation\nMultilingualization on Hugo Hugo automatically publishes multilingual sites by preparing a content file with the same name for each languages.\nHowever it\u0026rsquo;s impossible to show the content in the original language when the translated content file doesn\u0026rsquo;t exist.\nWe have to implement such function ourselves.\nhttps://gohugo.io/content-management/multilingual/#translate-your-content\nSpecification Prerequisite all contents exist on the original language (Japanese) some of them have manually translated but other are not automatically make an English translation of content - that is lacking a translation - during the build phase the tanslation runs in CI before Hugo builds html files Implementation The script (create_multilingual_contents.py) does:\nrecursively looks up xxx.ja-jp.md files in content/ directory if the translation (xxx.en.md) does not exists, creates it and copies the original file contents Operation all contents files in the original language are made with name xxx.ja-jp.md if I translate a content by myself, create a file with name xxx.en.md the CI takes care of the rest TODO the operation doesn\u0026rsquo;t work on the local environment (it does work, but we have to remove the automatically created translations) Reference Pull Request ","permalink":"https://mitsuyoshi-yamazaki.github.io/posts/2022-07-09-231640.217284/","summary":"Requirements make English version of the contents those are in the original language (Japanese) to make them use a machine translation[^1] manually write an English contents if possible[^2] ^1: I need a hook that the machine translation is triggered in the build phase\n^2: the build phase must distinguish the contents those are manually written to not override them by machine translation\nMultilingualization on Hugo Hugo automatically publishes multilingual sites by preparing a content file with the same name for each languages.","title":"Multilingualization"},{"content":"This article is automatically generated from the original content\n論文 Where did the pupa come from? The timing of juvenile hormone signalling supports homology between stages of hemimetabolous and holometabolous insects https://royalsocietypublishing.org/doi/full/10.1098/rstb.2019.0064\n定期的に話題に上る「蛹の起源」について。\n２大学説（「蛹＝終齢幼虫」vs「蛹＝全幼虫齢」）についてレビューし、変態制御遺伝子群の機能からも検討。\nhttps://twitter.com/Cyclommatism/status/1545369213212463105?s=20\u0026amp;t=SkllRtNcehkcRyMvwd1GyA\nWeight Agnostic Neural Networks Neural netの接続トポロジーのみを進化的計算で求め、学習（結合荷重の最適化）を省略することで高速に計算する手法\nhttps://weightagnostic.github.io\nわれわれががんばって学習させていたのは一体…？\n学習ありの場合の進化計算よりは時間かかる（要するに結合加重込みのトポロジーの最適解を求めているので）と思うのだけどどうなんじゃろ\n","permalink":"https://mitsuyoshi-yamazaki.github.io/posts/2022-07-08-231044.708063/","summary":"This article is automatically generated from the original content\n論文 Where did the pupa come from? The timing of juvenile hormone signalling supports homology between stages of hemimetabolous and holometabolous insects https://royalsocietypublishing.org/doi/full/10.1098/rstb.2019.0064\n定期的に話題に上る「蛹の起源」について。\n２大学説（「蛹＝終齢幼虫」vs「蛹＝全幼虫齢」）についてレビューし、変態制御遺伝子群の機能からも検討。\nhttps://twitter.com/Cyclommatism/status/1545369213212463105?s=20\u0026amp;t=SkllRtNcehkcRyMvwd1GyA\nWeight Agnostic Neural Networks Neural netの接続トポロジーのみを進化的計算で求め、学習（結合荷重の最適化）を省略することで高速に計算する手法\nhttps://weightagnostic.github.io\nわれわれががんばって学習させていたのは一体…？\n学習ありの場合の進化計算よりは時間かかる（要するに結合加重込みのトポロジーの最適解を求めているので）と思うのだけどどうなんじゃろ","title":"2022-07-08 論文"},{"content":"This article is automatically generated from the original content\nCollective Intelligence in Living/NonLiving System 何が生物の集団の中の個体の元気さを決定するのか？\nboidの個体数を1000~100000と変化させ群れの変動や密度を計測すると\nfluctuation: 変動\nperspectives on collective vitality\n0. Excitable media as a common property\nKinetic energy / templature Susceptibility of a collective Network structure Tetrahymena\n水中の単細胞\n","permalink":"https://mitsuyoshi-yamazaki.github.io/posts/2022-07-08-220928.687840/","summary":"This article is automatically generated from the original content\nCollective Intelligence in Living/NonLiving System 何が生物の集団の中の個体の元気さを決定するのか？\nboidの個体数を1000~100000と変化させ群れの変動や密度を計測すると\nfluctuation: 変動\nperspectives on collective vitality\n0. Excitable media as a common property\nKinetic energy / templature Susceptibility of a collective Network structure Tetrahymena\n水中の単細胞","title":"Collective Intelligence in Living/NonLiving System"},{"content":"This article is automatically generated from the original content\n自分の思索やらを記録しておきたいという要望が以前からあり、今までは物理のノートやTwitter, note, Zennや社内wikiなどに書いていましたが、\nデータが手元に残らないため失われる可能性がある 一元管理できない 内容を機械処理（翻訳、言語解析等）にかけるのが面倒 relationalな内容をそのように管理/取り扱いすることができない という問題がありました。\nrelationalな内容の管理とは、アイデアや思想はその周辺のアイデアとのつながりがあってこそ活きるので、人間の頭の中で起きているような連想を行える何者かのことです。\n要件 サイトのコンセプトが要件です\nなんでも書ける 書いたものはローカル/GitHubに残せる 書いたものを構造化できる 書いたものを後処理にかけられる 仕様 Git管理にする 静的HTMLをホスティングする 動的にする理由もないし… ホスティングはGitHub Pagesを利用 楽やねん ジェネレータはHugoを利用 なんでも良かったのだが、元コンテンツをMarkdownで記述できることと、GitHub Pagesが利用しているJekyllはGitHub Action上での変更容易性がなさそう\u0026amp;Ruby製なので中立のHugoにした ビルド\u0026amp;デプロイはGitHub Actionを利用 楽やねん relationalな内容の管理 どうしようね？ 実装・運用 静的HTML生成〜公開はHugoのドキュメンテーションが詳しく、おおよそ詰まらずにできた\n→ Hugoを使用したGitHub Pages用の静的HTML生成\nrelationalな内容の管理 実装を試みたことはある（BidirectionalEditor）がデータがない状態ではモチベーションが続かなかったので、まずコンテンツを拡充するのが当面の目標。\n各記事/記事中の用語に対してその説明/他の記事が紐づけられていて、ユーザー体験としては相互にリンクされたそれを自由に行き来できるというものになるはず。\n静的HTML + 手作業で行うこともおそらく可能なのでスモールスタートでやってみてもいい。\n本格的に機械的に行うなら毎ビルド時に総ざらいするよりDB入れたほうがいいが…とりま体験を先に作ってみましょう。\nその他 GitHub ActionでHugoのビルドに使用している peaceiris/actions-gh-pages@v3 はかなり用途が特定されている印象があるので複雑な処理を挟む場合は自前で書き直すかも 記事の体を成すものはですます調、それ以外は適当 ","permalink":"https://mitsuyoshi-yamazaki.github.io/posts/2022-07-07-155059.470834/","summary":"This article is automatically generated from the original content\n自分の思索やらを記録しておきたいという要望が以前からあり、今までは物理のノートやTwitter, note, Zennや社内wikiなどに書いていましたが、\nデータが手元に残らないため失われる可能性がある 一元管理できない 内容を機械処理（翻訳、言語解析等）にかけるのが面倒 relationalな内容をそのように管理/取り扱いすることができない という問題がありました。\nrelationalな内容の管理とは、アイデアや思想はその周辺のアイデアとのつながりがあってこそ活きるので、人間の頭の中で起きているような連想を行える何者かのことです。\n要件 サイトのコンセプトが要件です\nなんでも書ける 書いたものはローカル/GitHubに残せる 書いたものを構造化できる 書いたものを後処理にかけられる 仕様 Git管理にする 静的HTMLをホスティングする 動的にする理由もないし… ホスティングはGitHub Pagesを利用 楽やねん ジェネレータはHugoを利用 なんでも良かったのだが、元コンテンツをMarkdownで記述できることと、GitHub Pagesが利用しているJekyllはGitHub Action上での変更容易性がなさそう\u0026amp;Ruby製なので中立のHugoにした ビルド\u0026amp;デプロイはGitHub Actionを利用 楽やねん relationalな内容の管理 どうしようね？ 実装・運用 静的HTML生成〜公開はHugoのドキュメンテーションが詳しく、おおよそ詰まらずにできた\n→ Hugoを使用したGitHub Pages用の静的HTML生成\nrelationalな内容の管理 実装を試みたことはある（BidirectionalEditor）がデータがない状態ではモチベーションが続かなかったので、まずコンテンツを拡充するのが当面の目標。\n各記事/記事中の用語に対してその説明/他の記事が紐づけられていて、ユーザー体験としては相互にリンクされたそれを自由に行き来できるというものになるはず。\n静的HTML + 手作業で行うこともおそらく可能なのでスモールスタートでやってみてもいい。\n本格的に機械的に行うなら毎ビルド時に総ざらいするよりDB入れたほうがいいが…とりま体験を先に作ってみましょう。\nその他 GitHub ActionでHugoのビルドに使用している peaceiris/actions-gh-pages@v3 はかなり用途が特定されている印象があるので複雑な処理を挟む場合は自前で書き直すかも 記事の体を成すものはですます調、それ以外は適当 ","title":"このサイトについて"},{"content":"This article is automatically generated from the original content\n人工生命研究会#4でお勧めされた本\nRolf Pheifer 知能の原理 Niklas Luhmann 自己言及性について Humberto Maturana 知恵の樹 ウムベルトの本 身体化された心 精神と自然 肝心の勧められた理由を忘れた\nDDD関連でお勧めされた本\nエンタープライズアプリケーションアーキテクチャパターン みんな読んでるのは実践ドメイン駆動設計 ","permalink":"https://mitsuyoshi-yamazaki.github.io/posts/2022-07-07-150404.782474/","summary":"This article is automatically generated from the original content\n人工生命研究会#4でお勧めされた本\nRolf Pheifer 知能の原理 Niklas Luhmann 自己言及性について Humberto Maturana 知恵の樹 ウムベルトの本 身体化された心 精神と自然 肝心の勧められた理由を忘れた\nDDD関連でお勧めされた本\nエンタープライズアプリケーションアーキテクチャパターン みんな読んでるのは実践ドメイン駆動設計 ","title":"2022 07 07 15:04:04.782474"},{"content":"This is a test article written in English.\nIn the Japanese page, there\u0026rsquo;s Hugo cheat sheet.\n","permalink":"https://mitsuyoshi-yamazaki.github.io/posts/test/","summary":"This is a test article written in English.\nIn the Japanese page, there\u0026rsquo;s Hugo cheat sheet.","title":"Test"}]