<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>みつよし手稿</title><link>https://mitsuyoshi-yamazaki.github.io/ja-jp/</link><description>Recent content on みつよし手稿</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Sat, 03 Sep 2022 15:32:31 +0900</lastBuildDate><atom:link href="https://mitsuyoshi-yamazaki.github.io/ja-jp/index.xml" rel="self" type="application/rss+xml"/><item><title>Screepsドキュメンテーション超訳</title><link>https://mitsuyoshi-yamazaki.github.io/ja-jp/posts/2022-09-03_screeps_documentation/</link><pubDate>Sat, 03 Sep 2022 15:32:31 +0900</pubDate><guid>https://mitsuyoshi-yamazaki.github.io/ja-jp/posts/2022-09-03_screeps_documentation/</guid><description>※ この記事で単にScreepsと記載しているゲームはScreeps: Worldのことです
※※ この記事が参照している情報は2022年8月時点のものです
Screepsのチュートリアルを終えるといよいよゲーム世界にデプロイできるようになりますが、実サーバーでうごくbotを実装するためにはゲーム世界の非機能要件を知っている必要があります。
これはScreepsのドキュメンテーションに記載されているのですが、それを読めというヒントはどこにも出てこないうえに英語で記載されているので、初心者に必要な部分を抜粋して日本語でまとめておきます。
Docs - Screeps
Overview botを実装するにあたって参考になるリンク集が載っています。
実装を安全に試したいプレイヤー向けのサンドボックス環境：Tutorial, Training, Custom Tutorial ステップバイステップでCreep, Spawn, Towerの使用方法とゲーム内エディタの使い方を学びます Training あらかじめ決められた地形で、実装したbotを検証するための環境です Custom 地形、RCL、Structureの数など、ほとんど全ての環境要因を自由にカスタムできる環境でbotの動作検証を行えます ドキュメンテーション https://docs.screeps.com ここでまとめているドキュメンテーション本体 https://docs.screeps.com/api/ ゲームが提供するAPIの仕様書 コミュニティチャット 運営がDiscordサーバーを提供しており、ゲームと実装に関する話題/質問についてチャットできます
招待リンク：https://discord.com/invite/RjSS5fQuFx
主なDiscordチャンネル
rules Discordの使用ルールです。要するに大人としてふるまってくださいねということです。読んでください useful-links お役立ちリンク集です world-help 全般的な質問をする場所 cpu-clinic CPU使用時間に関する質問をする場所 languages and technologiesのチャンネル群 各プログラミング言語に関する話題を話す場所 japanese-日本語 日本語で質問ができる場所 Introduction Roomの外に広がるゲーム世界の説明です。
ゲーム世界は50 x 50セルで構成されるRoom, 9 x 9Roomで構成されるSector, Sectorの集合であるShardという単位で構成されています。
Room 50 x 50セルで構成される セルはそれぞれplain, swamp, wallのいづれかの状態をとり、これがRoomごと固有の地形をつくる Controllerをclaimすることで自分の支配下に置くことができ、Structureを設置できるようになる Roomは隣接するRoomと接続しており、Creepはその間を自由に移動できる Sector 9 x 9Roomで構成される Sectorの構造： 中心の3x3RoomはControllerをもたずclaim不可だが、資源の豊富なSource Keeper&amp;rsquo;s Room Source Keeper&amp;rsquo;s Room以外は通常のclaim可能なRoom Sectorの間はこれもControllerをもたないHighway Roomが区切っており、claimされず妨害が少ないのでCreepの長距離移動に用いられる Shard 12 x 12程度のSectorで構成される shard0, shard1, shard2, shard3の4つのshardがあり、それぞれ独立して実行されるためtick速度が異なる shard3のみCPUに上限がかかっているため、CPU unlockの課金の有無に関わらず、全員平等なCPU量でプレイができる 初心者プレイヤーはshard3にデプロイするのが良いでしょう。</description></item><item><title>MembraneAutomata</title><link>https://mitsuyoshi-yamazaki.github.io/ja-jp/posts/2022-07-30-174703.671472/</link><pubDate>Sat, 30 Jul 2022 17:47:03 +0900</pubDate><guid>https://mitsuyoshi-yamazaki.github.io/ja-jp/posts/2022-07-30-174703.671472/</guid><description>これは学生の頃、連休中に思い立って書き上げたMacアプリケーションです。
10年以上前の実装にも関わらず現行マシンで問題なくコンパイルできました。実装言語のObjective-CとCに大きな更新がなかったためかな？
当時はパターンが収束してしまうことがわかり触るのをやめてしまったのですが、モデルの筋はいい気がするのでパラメータを変えて自動探索にかけたらなにか生まれそうな気がします。
概要 生命現象の土台となる恒常性をもつパターンが現れうる系を作成しました。今回はモデルと計算の簡便さから、系の基本構造にはセルオートマトンを採用しました。セルオートマトンはConway&amp;rsquo;s Game of Life[^1]に代表されるように、単純なモデルを比較的少ない計算量で実行できる便利な計算モデルです。しかしパターンの恒常性の観点から考えると、ひとつのセルの状態が反転しただけで崩壊するような不安定なモデルに恒常性をもたせるのは困難です。MembraneAutomataでは近傍半径を増やす[^2]ことで頑強なパターン構築を可能にしました。そしてMNCAの上で、恒常性のある領域を外界から隔離するために、泡状の構造が生成される簡易化学モデルを実装しました。
^1: Conway&amp;rsquo;s Game of Life - Wikipedia
^2: Multiple Neighbourhood Cellular Automata (MNCA)と呼ばれる。Understanding Multiple Neighbourhood Cellular Automata
Motivation of Current Work 私は生命のもつ予測不能性を再現するというテーマを研究しており、この作品はそのテーマのうえで、恒常性の創発に主眼を置いて作ったものです。予測不能性という制約のもとで設計するためには、実現したい現象（ここでは恒常性）を直接実装するのではなく、下位の現象を実装することを介して、実現したい上位の現象を創発する、という手法をとる必要があります。本作ではセルオートマトンの状態遷移ルールを適切に設定することによりそれを実現しました。
要件 系の要件 a. 比較的単純かつ小規模な計算で実現できること b. 現れるパターンがConway&amp;rsquo;s Game of Lifeより安定していること a.モデルの単純さと計算しやすさの要件からセルオートマトンを選択し、b.パターン安定の要件から近傍半径を増やして近傍セルひとつあたりのパターンへの影響度を小さくすることにしました。
セルオートマトンのルール要件 c. 恒常性をもつパターンが発生しうること c1. 系全体では、自然な行いに任せていると秩序が失われること（現実世界でのエントロピーの増大則と同等の仕組み） c2. そのような系のなかで、外界に影響されない区画が存在すること c21. その区画の境界部分が外界の影響を打ち消し、内部に伝えない役割を果たすこと 現実の現象を参考にこれらの要件を満たすルールを考えると、水中の油滴、あるいは泡を抽象化することで理解しやすいモデルを作れそうに思えます。泡状のパターンの境界付近で外界の影響を打ち消し、内部に恒常性をつくる、という構造です。
実装仕様 実装: MembraneAutomata - GitHub
MNCAの実装 MembraneAutomataで実装するMNCAは近傍半径を2以上に拡張したものです。自セルの次の状態に影響する近傍セル数 n 近傍半径を r と置いたとき
n = (r * (r + 1)) * 4</description></item><item><title>Read it later</title><link>https://mitsuyoshi-yamazaki.github.io/ja-jp/posts/2022-07-26-104752.229035/</link><pubDate>Tue, 26 Jul 2022 10:47:52 +0900</pubDate><guid>https://mitsuyoshi-yamazaki.github.io/ja-jp/posts/2022-07-26-104752.229035/</guid><description>あれば更新します
全般 Self-Reproduction and Evolvability 人工生命とは https://scrapbox.io/ayu-mushi/ シミュレーション molcloud - GitHub Open-Endedness For AGI, we need better tasks. For better tasks, we need open-endedness. Minecraft Open-Endedness Challenge プレゼンテーション クレイグ・ベンター 人工生命に関する発表 Games and Artificial Life: Open Endedness as common ground? CoG 2021 Keynote 書籍・論文 http://www.standardinc.jp/books/ Conway&amp;rsquo;s Game of Life Textbook 認知、意図、推論 ベイトソン 精神と自然: 生きた世界の認識論 フランシスコ・ヴァレラ 身体化された心 ウムベルト 知恵の樹 ニクラス・ルーマン 自己言及性について Reward is enough ロルフ・ファイファー 知能の原理 Screeps Screeps #4: Hauling is (NP-)hard Automated planning and scheduling カンファレンス GECKO Newsletter AI 人工知能に関する断創録 言語 Heart of Swift Building the Fastest JS (De)serializer 事業 未踏 育成事業以外は年齢制限がない？ 社会実装できること重視な印象 https://www.</description></item><item><title>ALIFE2022 Day4</title><link>https://mitsuyoshi-yamazaki.github.io/ja-jp/posts/2022-07-21-225949.235000/</link><pubDate>Thu, 21 Jul 2022 22:59:49 +0900</pubDate><guid>https://mitsuyoshi-yamazaki.github.io/ja-jp/posts/2022-07-21-225949.235000/</guid><description>疲れたので適当に流していたがこの発表はおもしろかった
細胞のモデルの、同期的並列的に動作する部分と逐次直列で動作する部分をうまく分離してそれぞれ適した実装をしたという発表　String: a programming language for the evolution of ribozymes in a new computational protocell model Proceeding: https://direct.mit.edu/isal/proceedings/isal/54/112248
細胞の基本的な機能は遺伝子、代謝ネットワーク、細胞膜から成り、これをモデル化したミニマムなProtoCell Modelを生成したという研究
面白いのは&amp;rsquo;RNA&amp;rsquo;がコードする&amp;rsquo;タンパク質&amp;rsquo;が短いプログラミングコードになっており（タイトルに入っているString言語: 言語仕様はProceedingにある）、それがなんやかや実行されて周囲に作用をするというつくりになっているところ。
エンコードされているので組み替えも突然変異もできる。Proceedingには設計した&amp;rsquo;タンパク質&amp;rsquo;と進化後それぞれのコードが載っている。</description></item><item><title>ALIFE2022 Day3</title><link>https://mitsuyoshi-yamazaki.github.io/ja-jp/posts/2022-07-20-160351.239259/</link><pubDate>Wed, 20 Jul 2022 16:03:51 +0900</pubDate><guid>https://mitsuyoshi-yamazaki.github.io/ja-jp/posts/2022-07-20-160351.239259/</guid><description>英語聴きすぎてよくわからなくなってきた
参加費にお菓子代が入ってれば経費なのに…
Chemically fueled droplets; towards the synthesis of life ボトムアップで生命の理解を深める
生命の要素
Self-sustaining: 熱的平衡状態を保つ Compartment: ダーウィン進化: 自己複製と突然変異 self-sustaining compartmentをつくる
エネルギーを取り込んでごみを排出する →化学サイクルを設計する Growing Isotropic Neural Cellular Automata growing neural CA + self organizing texture
GNCAの問題点：
anisotropy（異方性）があること：回転させると壊れる</description></item><item><title>ALIFE2022 Day2</title><link>https://mitsuyoshi-yamazaki.github.io/ja-jp/posts/2022-07-19-171558.333498/</link><pubDate>Tue, 19 Jul 2022 17:15:58 +0900</pubDate><guid>https://mitsuyoshi-yamazaki.github.io/ja-jp/posts/2022-07-19-171558.333498/</guid><description>アブストの載っているプログラムを翻訳したのち聞くようにしたら多少わかるようになった…か？わからん
オーストラリアのソフトウェアエンジニアの参加者に、Tierraで個体長を大きくする淘汰圧はどう実装するかやオートエンコーダで創発が検出できるのではといった話を聞いた。聞き返せると6割くらいはわかる
Empathic Active Inference: Active Inference with Empathy Mechanism for Socially Behaved Artificial Agent 共感の認知機能を実装することでエージェントに利他的なふるまいをさせることを可能にしたという発表
そのようなエージェントも利己的な集団に突っ込むと利己的にふるまうようなので、単に他者の利益を評価してそのようにふるまっているわけではない
Voluntary safety pledges overcome over-regulation dilemma in AI development: an evolutionary game analysis エージェントの行動を直接的に制限するのではなく、制約を設けることにより自発的にある行動を抑制するような仕組みを作ったという発表
Simulations of Vesicular Distanglement 細胞の小胞体間の接続をどのように切り離すかシミュレーションで研究したという発表
時間になっても発表者が現れなかったため昼休みになった。自由かよ
泡状の物体をどう分裂させるかという話なのだったら気になっていたので後で見直したい
泡のような形状を自律的につくる系をつくるのは簡単で、互いに接続しつつ体積あたりの表面積が最小になるような制約をかければすぐできる。
一方でこれを分裂させようとするのはその制約に反するため難しい。
より大きな制約をつくって、「今までの制約は大きな制約のひとつの側面でしかないんですよ、こういう条件では制約が緩くなりますよ」ということにするか、別の仕組みを導入して力技でなんとかするか、現実の生命はどうやっているんだろうね？
Evolving Unbounded Neural Complexity in Pursuit-Evasion Games 共進化で個体の複雑さは増加する
prior workに出ていた言語推測ゲームって立命館大学の谷口先生かな？
Firefly-inspired vocabulary generator for communication in multi-agent systems 蛍が群れていると自分の点滅パターンが大勢に埋もれてしまい相手に届かないため、埋もれないような点滅パターンをどのように生成するかという発表
Alternative Comfortの研究と似てるかな
その他に気になった発表 Testing the Efficiency of a Genome-Wide Association Study on a Computational Evolutionary Model 手法として取り入れたALifeモデルが面白そうだった</description></item><item><title>ALIFE2022 Day1</title><link>https://mitsuyoshi-yamazaki.github.io/ja-jp/posts/2022-07-18-193111.491634/</link><pubDate>Mon, 18 Jul 2022 19:31:11 +0900</pubDate><guid>https://mitsuyoshi-yamazaki.github.io/ja-jp/posts/2022-07-18-193111.491634/</guid><description>今年はイタリアなのでCESTで時差は7時間
全て英語なので事前にアブストを読んで話の流れを掴んでおかないとだいたいわからない
The evolution of adaptive phenotypic plasticity stabilizes populations against environmental fluctuations Phenotypic plasticity:
which is the capacity for a single genotype to produce alternate phenotypes depending on environmental conditions.
Adoptive phenotypic plasticity: 〜が個体の生存に有利であること
digital organism(Avida)でモデルを検証
餌（reword）と毒(punish)をもつ環境　餌と毒が逆のふたつの環境を用意し、その環境を交互に切り替える
みっつの実験
plastic 環境の変化を検出できる non-plastic 環境の変化を検出できない static 環境の変化がない（全て餌 non-plasticのみ突然変異率と表現型の変化率が桁幾つというレベルで高かった
Evolving Programmable Computational Metamaterials ファジーな論理ゲートを生成するみたいなモデルが面白かった
粒子の運動がどのように伝播するか、入力の粒子と出力の粒子を用意して入力粒子を動かして出力の粒子の動きを出力として扱う
その他に気になった発表 Is Prediction Required? Using Evolutionary Robotics to Investigate How Systems Cope with Self-Caused Stimuli Dirty Transmission Hypothesis: Increased Mutations During Horizontal Transmission Can Select for Increased Levels of Mutualism in Endosymbionts Finding Chemical Organisations in Matter-Conserving AChems</description></item><item><title>自然言語処理の前処理を実装</title><link>https://mitsuyoshi-yamazaki.github.io/ja-jp/posts/2022-07-14-004507.913203/</link><pubDate>Thu, 14 Jul 2022 00:45:08 +0900</pubDate><guid>https://mitsuyoshi-yamazaki.github.io/ja-jp/posts/2022-07-14-004507.913203/</guid><description>記事に対して機械翻訳を含む自然言語処理を行えるようにするため、人間が記述するMarkdownの自然言語部分のみを取り出す処理を書きます
正規表現で全て判別できたのでわりあい簡単にできた
要件 Markdownで記述している記事の内容を、機械翻訳を含む任意の自然言語処理に渡せるようにする 仕様 Markdownをある程度パースして自然言語の文のみを抽出する 直近で使うのは他言語コンテンツ自動生成における機械翻訳なので、生成処理の部分を置き換える 実装 Markdownパーサー 行ごとに分割したうえで、自然言語ではない以下の構文を取り除く Hugoの制御構文である ^\n*---\n(\n|.)*?\n---\n Markdownのprefixである ^(&amp;gt;|\s*(#####|####|###|##|#|- \[ \]|- \[x\]|-|\d+\.)) 他言語コンテンツ生成処理の変更点 機械翻訳は未着手なのでとりあえず「機械生成の文ですよ」という一文を挿入する Reference Pull Request 翻訳スクリプト</description></item><item><title>サイトの多言語対応</title><link>https://mitsuyoshi-yamazaki.github.io/ja-jp/posts/2022-07-09-231640.217284/</link><pubDate>Sat, 09 Jul 2022 23:16:40 +0900</pubDate><guid>https://mitsuyoshi-yamazaki.github.io/ja-jp/posts/2022-07-09-231640.217284/</guid><description>しました
Hugoが基本的な機能の提供に終始してくれているため、その上では自由に実装できて特に問題もなく要件の実装ができた。
要件 基本的に日本語で記述する 英語版もつくる 機械翻訳で英訳する[^1] 機械翻訳を手作業で修正することもある[^2] ^1より、英語版コンテンツ生成に介入できる口が必要
^1と^2より、手動で翻訳したコンテンツと機械生成されたコンテンツの判別が必要
Hugoの多言語対応設定 コンテンツ（記事）の多言語対応は言語ごとの同名のファイルを用意することで行われ、翻訳がない場合にデフォルト言語のコンテンツを表示する、などのフォールバックはないためそのままでは要件を満たせない
https://gohugo.io/content-management/multilingual/#translate-your-content
仕様 想定 日本語には必ず全てのコンテンツファイルがある 全てのコンテンツに英語版ファイルがあるとは限らない Hugoの多言語対応機能に載せると「コンテンツがない場合はデフォルトの言語の記事を表示する」をやりにくいためビルドの前処理で他言語ファイルを生成する 機械翻訳は挟める余地のみ残して実装は後回し。ひとまず日本語コンテンツのコピーを生成することでよしとする 実装 スクリプト（create_multilingual_contents.py）で以下を行う★
content/ 以下の .ja-jp.md ファイルを再帰的にリストアップする 対応言語（現在は英語のみ）のファイルがなければ内容をコピーした .en.md ファイルを生成する ★をGitHub Action上でHugoのビルド処理を行う直前に実行することで、ホスティングしている環境のみで他言語対応コンテンツを生成する
運用 日本語コンテンツ生成時は .ja-jp.md で生成する 自分で英訳する場合は &amp;lt;対応するファイル名&amp;gt;.en.md で生成する あとはCIがやる 課題 ローカル環境で他言語コンテンツ生成を行った場合は、そのファイルを削除しておかないとその後更新されなくなってしまう Reference Pull Request</description></item><item><title>2022-07-08 論文</title><link>https://mitsuyoshi-yamazaki.github.io/ja-jp/posts/2022-07-08-231044.708063/</link><pubDate>Fri, 08 Jul 2022 23:10:44 +0900</pubDate><guid>https://mitsuyoshi-yamazaki.github.io/ja-jp/posts/2022-07-08-231044.708063/</guid><description>論文 Where did the pupa come from? The timing of juvenile hormone signalling supports homology between stages of hemimetabolous and holometabolous insects https://royalsocietypublishing.org/doi/full/10.1098/rstb.2019.0064
定期的に話題に上る「蛹の起源」について。
２大学説（「蛹＝終齢幼虫」vs「蛹＝全幼虫齢」）についてレビューし、変態制御遺伝子群の機能からも検討。
https://twitter.com/Cyclommatism/status/1545369213212463105?s=20&amp;amp;t=SkllRtNcehkcRyMvwd1GyA
Weight Agnostic Neural Networks Neural netの接続トポロジーのみを進化的計算で求め、学習（結合荷重の最適化）を省略することで高速に計算する手法
https://weightagnostic.github.io
われわれががんばって学習させていたのは一体…？
学習ありの場合の進化計算よりは時間かかる（要するに結合加重込みのトポロジーの最適解を求めているので）と思うのだけどどうなんじゃろ</description></item><item><title>Collective Intelligence in Living/NonLiving System</title><link>https://mitsuyoshi-yamazaki.github.io/ja-jp/posts/2022-07-08-220928.687840/</link><pubDate>Fri, 08 Jul 2022 22:09:28 +0900</pubDate><guid>https://mitsuyoshi-yamazaki.github.io/ja-jp/posts/2022-07-08-220928.687840/</guid><description>Collective Intelligence in Living/NonLiving System 何が生物の集団の中の個体の元気さを決定するのか？
boidの個体数を1000~100000と変化させ群れの変動や密度を計測すると
fluctuation: 変動
perspectives on collective vitality
0. Excitable media as a common property
Kinetic energy / templature Susceptibility of a collective Network structure Tetrahymena
水中の単細胞</description></item><item><title>このサイトについて</title><link>https://mitsuyoshi-yamazaki.github.io/ja-jp/posts/2022-07-07-155059.470834/</link><pubDate>Thu, 07 Jul 2022 15:50:59 +0900</pubDate><guid>https://mitsuyoshi-yamazaki.github.io/ja-jp/posts/2022-07-07-155059.470834/</guid><description>自分の思索やらを記録しておきたいという要望が以前からあり、今までは物理のノートやTwitter, note, Zennや社内wikiなどに書いていましたが、
データが手元に残らないため失われる可能性がある 一元管理できない 内容を機械処理（翻訳、言語解析等）にかけるのが面倒 relationalな内容をそのように管理/取り扱いすることができない という問題がありました。
relationalな内容の管理とは、アイデアや思想はその周辺のアイデアとのつながりがあってこそ活きるので、人間の頭の中で起きているような連想を行える何者かのことです。
要件 サイトのコンセプトが要件です
なんでも書ける 書いたものはローカル/GitHubに残せる 書いたものを構造化できる 書いたものを後処理にかけられる 仕様 Git管理にする 静的HTMLをホスティングする 動的にする理由もないし… ホスティングはGitHub Pagesを利用 楽やねん ジェネレータはHugoを利用 なんでも良かったのだが、元コンテンツをMarkdownで記述できることと、GitHub Pagesが利用しているJekyllはGitHub Action上での変更容易性がなさそう&amp;amp;Ruby製なので中立のHugoにした ビルド&amp;amp;デプロイはGitHub Actionを利用 楽やねん relationalな内容の管理 どうしようね？ 実装・運用 静的HTML生成〜公開はHugoのドキュメンテーションが詳しく、おおよそ詰まらずにできた
→ Hugoを使用したGitHub Pages用の静的HTML生成
relationalな内容の管理 実装を試みたことはある（BidirectionalEditor）がデータがない状態ではモチベーションが続かなかったので、まずコンテンツを拡充するのが当面の目標。
各記事/記事中の用語に対してその説明/他の記事が紐づけられていて、ユーザー体験としては相互にリンクされたそれを自由に行き来できるというものになるはず。
静的HTML + 手作業で行うこともおそらく可能なのでスモールスタートでやってみてもいい。
本格的に機械的に行うなら毎ビルド時に総ざらいするよりDB入れたほうがいいが…とりま体験を先に作ってみましょう。
その他 GitHub ActionでHugoのビルドに使用している peaceiris/actions-gh-pages@v3 はかなり用途が特定されている印象があるので複雑な処理を挟む場合は自前で書き直すかも 記事の体を成すものはですます調、それ以外は適当</description></item><item><title>2022 07 07 15:04:04.782474</title><link>https://mitsuyoshi-yamazaki.github.io/ja-jp/posts/2022-07-07-150404.782474/</link><pubDate>Thu, 07 Jul 2022 15:04:04 +0900</pubDate><guid>https://mitsuyoshi-yamazaki.github.io/ja-jp/posts/2022-07-07-150404.782474/</guid><description>人工生命研究会#4でお勧めされた本
Rolf Pheifer 知能の原理 Niklas Luhmann 自己言及性について Humberto Maturana 知恵の樹 ウムベルトの本 身体化された心 精神と自然 肝心の勧められた理由を忘れた
DDD関連でお勧めされた本
エンタープライズアプリケーションアーキテクチャパターン みんな読んでるのは実践ドメイン駆動設計</description></item><item><title>Hugoチートシート</title><link>https://mitsuyoshi-yamazaki.github.io/ja-jp/posts/test/</link><pubDate>Tue, 05 Jul 2022 17:41:39 +0900</pubDate><guid>https://mitsuyoshi-yamazaki.github.io/ja-jp/posts/test/</guid><description>テスト記事兼Hugoチートシート
Hugoを使用したGitHub Pages用の静的HTML生成 - Zenn
サイト内リンク サイト内リンクを貼ろう - なかけんのHugoノート
生成後のHTMLファイルへのパスではなく、生成前のMarkdownのパスを指定すると生成時に変換してくれるらしい。
便利ですね
記事生成 テンプレート Archetypes と呼ばれる
記事生成時に対応するArchetypeが探索され、マッチしたものが適用される
https://gohugo.io/content-management/archetypes/
Archetypes Archethypeの動的値の設定はfunctionsという機能が司っている
https://gohugo.io/functions/
Markdownコンテンツ Front Matter(トップのあれ フォーマットはyml/toml/json https://gohugo.io/content-management/front-matter/ title: &amp;#34;Hugoチートシート&amp;#34; date: 2022-07-05T17:41:39+09:00 draft: false tags: - programming - hugo</description></item></channel></rss>